ident   =  { LETTER ~ (LETTER | NUMBER)* }
ty      =  { "f32" | "vec4" | "bool" | "mat4x4" | "Class" | "()" | "(" ~ w ~ (ty ~ w ~ "," ~ w)+ ~ (ty ~ w)? ~ ")" }
w       = _{ ("\n" | "\r" | " " | "\t")* }
binding =  { ident ~ w ~ ":" ~ w ~ ty }
COMMENT = _{ ("//" ~ (!"\n" ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

implement = { ident ~ "::" ~ ident }
bound = { ident ~ w ~ ":" ~ w ~ (ident ~ w ~ "+" ~ w)* ~ ident }
bounds = { "<" ~ w ~ bound ~ w ~ ("," ~ w ~ bound ~ w)* ~ ">" }

document = { (w ~ (class | interface))* ~ w }
interface = { "interface" ~ w ~ ident ~ w ~ "{" ~
		w ~ ((default_method | method_header) ~ w ~ "," ~ w)* ~ (default_method | method_header)? ~ w
	~ "}"
}
method_header = {
	ident ~ w ~ "(" ~ w ~ (binding ~ w ~ "," ~ w)* ~ binding? ~ ")" ~ w ~ "->" ~ w ~ ty
}
default_method = {
	ident ~ w ~ "(" ~ w ~ (binding ~ w ~ "," ~ w)* ~ binding? ~ ")" ~ w ~ "->" ~ w ~ ty ~ w ~ block
}
class    = {
    "class" ~ w ~ ident ~ w ~ "{" ~
        w ~ ((binding | method) ~ w ~ "," ~ w)* ~ ((binding | method) ~ w)?
    ~ "}" ~ (w ~ "=>" ~ w ~ instance)?
}
method   = {
    (implement | ident) ~ w ~ bounds? ~ w ~ "(" ~ w ~ (binding ~ w ~ "," ~ w)* ~ binding? ~ ")" ~ w ~ "->" ~ w ~ ty ~ w ~ block
}

block_wrapper = { block }
block = { "{" ~ w ~ (stmt ~ w)* ~ (expr ~ w)? ~ "}" }
stmt  = { (decl | asgn | (expr ~ ";")) }
    decl = { "let" ~ w ~ binding ~ w ~ "=" ~ w ~ expr ~ w ~ ";" }
    asgn = { ident ~ w ~ "=" ~ w ~ expr ~ ";" }

expr = { (prec4) }
    exprs = { "(" ~ w ~ (expr ~ w ~ "," ~ w)* ~ (expr ~ w)? ~ ")" }
    prec0 = { "(" ~ w ~ prec2 ~ w ~ ")" | app | dot | tuple | var | lit | block_expr_wrapper }
        app       = { ident ~ w ~ exprs }
        dot       = { ident ~ "." ~ ident ~ exprs }
        tuple     = { "(" ~ w ~ (expr ~ w ~ "," ~ w)+ ~ (expr ~ w)? ~ ")" }
        var       = { ident }
        lit       = { (number | bool) }
            bool       = { "true" | "false" }
            number     = { (NUMBER+ ~ "."? ~ NUMBER*) | (NUMBER* ~ "." ~ NUMBER+) }
//             vec4       = { "Vec4" ~ "(" ~
//                 w ~ number ~ w ~ "," ~
//                 w ~ number ~ w ~ "," ~
//                 w ~ number ~ w ~ "," ~
//                 w ~ number ~ w ~ ("," ~ w)?
//             ~ ")" }
//             mat4       = { "Mat4" ~ "(" ~
//                 w ~ vec4 ~ w ~ "," ~
//                 w ~ vec4 ~ w ~ "," ~
//                 w ~ vec4 ~ w ~ "," ~
//                 w ~ vec4 ~ w ~ ("," ~ w)?
//             ~ ")" }
        block_expr = { "{" ~ w ~ (stmt ~ w)* ~ (expr ~ w) ~ "}" }
        block_expr_wrapper = { block_expr }
    unary = { (unary_op ~ w ~ unary | prec0) }
        unary_op = { "!" | "-" | "+" }
    prec1 = { (unary ~ w ~ op1 ~ w ~ prec1) | unary }
        op1 = { "*" | "/" }
    prec2 = { (prec1 ~ w ~ op2 ~ w ~ prec2) | prec1 }
        op2 = { "+" | "-" }
    prec3 = { (prec2 ~ w ~ op3 ~ w ~ prec3) | prec2 }
        op3 = { "&&" | "||" }
    prec4 = { (prec3 ~ w ~ op4 ~ w ~ prec4) | prec3 }
        op4 = { "==" | "!=" | "<" | "<=" | ">" | ">=" }

key_val = { ident ~ (w ~ ":" ~ w ~ (instance | expr))? }
instance = { ident ~ w ~ "{" ~ w ~ (key_val ~ w ~ "," ~ w)* ~ key_val? ~ w ~ "}" }
