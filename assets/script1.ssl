class Plane4D {
    normal: Vec4,
    Proj::proj(vector: Vec4) -> Vec4 {
        vector - normal * dot(vector, normal)
    },
    Sdf::sdf(vector: Vec4) -> f32 {
        dot(vector, normal)
    }
}

interface Sdf {
    sdf(vector: Vec4) -> f32,
}

interface Proj {
    proj(vector: Vec4) -> Vec4,
}

class Shell {
    offset: f32,
    shape: Class,
    Proj::proj<shape: proj>(vector: Vec4) -> Vec4 {
        let proj = shape.proj(vector);

        proj + offset * normalize(vector - proj)
    },
    Sdf::sdf<shape: proj>(vector: Vec4) -> f32 {
        abs(shape.sdf(vector)) - offset
    }
}