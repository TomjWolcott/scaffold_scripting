class Plane4D {
    normal: Vec4,
    Proj::proj(vector: Vec4) -> Vec4 {
        vector - normal * dot(vector, normal)
    },
    Sdf::sdf(vector: Vec4) -> f32 {
        dot(vector, normal)
    }
}

interface Sdf {
    sdf(vector: Vec4) -> f32,
}

interface Proj {
    proj(vector: Vec4) -> Vec4,
}

class Shell {
    offset: f32,
    shape: Class,
    Proj::proj<shape: Proj>(vector: Vec4) -> Vec4 {
        let proj = shape.proj(vector);

        proj + offset * normalize(vector - proj)
    },
    Sdf::sdf<shape: Sdf>(vector: Vec4) -> f32 {
        abs(shape.sdf(vector)) - offset
    }
}

class Wormhole {
    shape: Class,
    shift: Vec4,
    normal: Vec4,
    radius: f32
} => Rounding {
    radius,
    shape: Subtract {
        shape1: Shift {
            shift,
            shape: HalfPlane {
                normal,
                cut: normalize(shift)
            }
        },
        shape2: shape
    }
}